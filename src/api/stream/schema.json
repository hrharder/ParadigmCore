{
	"$schema": "https://rawgit.com/mzernetsch/jrgen/master/jrgen-spec.schema.json",
	"jrgen": "1.1",
	"jsonrpc": "2.0",
	"info": {
		"title": "StreamAPI Reference",
		"description": [
			"The StreamAPI enables interaction with ParadigmCore via JSONRPC/WebSocket.\n",
			"The API is served by the `StreamServer`, an optional component included as part of the `api` module in ParadigmCore.\n",
            "StreamAPI follows the JSONRPC-2.0 specification. More information available at http://www.jsonrpc.org/specification."
        ],
		"version": "0.1-rc-4"
	},
	"definitions": {},
	"methods": {
		"subscription.start": {
			"summary": "Subscribe to a specific ParadigmCore event.",
			"description": [
				"Initiate a subscription to an OrderStream node for specific blockchain and state-related events.\n",
				"The `eventName` parameter is used to subscribe to specific blockchain events. Currently, you can subscribe to `block` events, or `orders`.\n",
				"A `block` subscription (with no filters) will push various blockchain and header data to the client upon a new block being committed. The `filters` parameter can be used to filter out irrelevant data.\n",
				"If no strings are included in the `filters` parameter, all block data will be returned.\n",
				"The `orders` subscription will alert the client with an array of all accepted `order` transactions for each new block. By default, a notification is sent to the client every block, even if there were no `order` transactions in that block."
			],
			"tags": [
                "subscription"
            ],
			"params": {
				"type": "object",
				"properties": {
					"eventName": {
						"description": "The name of the event you are subscribing to. Can be 'orders' or 'block' currently.",
                        "default": "block",
                        "enum": ["orders", "block"],
						"type": "string",
						"minLength": 1
					},
					"filters": {
						"description": "An array of strings to be used as response filters. If present, only the keys in the filter array will be included in the response.",
						"type": "array",
						"default": ["height", "time"]
					}
				},
				"required": ["eventName"]
			},
			"result": {
				"type": "object",
				"properties": {
					"response": {
						"description": "The server's response to the subscription-start request.",
						"default": "Successfully started subscription",
						"type": "string"
					},
					"subscriptionId": {
						"description": "A unique ID that can be used for filtering many event subscriptions.",
						"default": "84a55ba0-7f87-4430-b921-738f84857889",
						"type": "string"
					}
				},
				"required": ["response"]
			},
			"errors": [
				{
					"description": "The provided parameters are invalid.",
					"code": -32602,
					"message": "Invalid Parameters",
					"data": {}
				},
				{
					"description": "The request object is invalid.",
					"code": -32600,
					"message": "Parse Error",
					"data": {}
				},
				{
					"description": "The server encountered an error processing the request.",
					"code": -32603,
					"message": "Internal Error",
					"data": {}
				}
			]
        },
        "subscription.end": {
			"summary": "Unsubscribe from a specific ParadigmCore event.",
			"description": "Immediately end a subscription to a certain event, and stop receiving notifications.",
			"tags": [
                "subscription"
            ],
			"params": {
				"type": "object",
				"properties": {
					"subscriptionId": {
						"description": "A unique ID provided by the server upon an event subscription.",
						"default": "84a55ba0-7f87-4430-b921-738f84857889",
						"type": "string"
					}
				},
				"required": ["subscriptionId"]
			},
			"result": {
				"type": "object",
				"properties": {
					"response": {
						"description": "The server's response to the subscription-end request.",
						"default": "Successfully ended event subscription.",
						"type": "string"
					}
				},
				"required": ["response"]
			},
			"errors": [
				{
					"description": "The provided parameters are invalid.",
					"code": -32602,
					"message": "Invalid Parameters",
					"data": {}
				},
				{
					"description": "The request object is invalid.",
					"code": -32600,
					"message": "Parse Error",
					"data": {}
				},
				{
					"description": "The server encountered an error processing the request.",
					"code": -32603,
					"message": "Internal Error",
					"data": {}
				}
			]
		},
		"order.submit": {
			"summary": "Propose an order to be broadcast to the network.",
			"description": [
				"Submit a signed Paradigm order object to a validator to be broadcast to the network.\n",
				"Allows selection of `mode` which can be set to `async`, in which case the RPC will respond immediately without waiting for the order to be verified by the node.\n",
				"The mode can also be set to `sync` where the RPC will respond after the order has been accepted or rejected by the node's local mempool.\n",
				"To wait for the order to be included in a block (up to 3 seconds), set the mode to `commit`.\n",
				"Orders can be created and signed with the ParadigmConnect library."
			],
			"tags": [
                "order"
            ],
			"params": {
				"type": "object",
				"properties": {
					"order": {
						"type": "object",
						"description": "The signed Paradigm order object (in object notation) to be submitted.\n The example shows a 0x order wrapped for the 0x SubContract.",
						"default": {
							"subContract":"0x0afd97c4548d6a5db854d6b1b4b18138327f944c",
							"maker":"0x8b366a3d4e46ac5406f12766ad33e6482ce4f081",
							"makerArguments":[
								{"dataType":"address","name":"makerAddress"},
								{"dataType":"address","name":"takerAddress"},
								{"dataType":"address","name":"feeRecipientAddress"},
								{"dataType":"address","name":"senderAddress"},
								{"dataType":"uint","name":"makerAssetAmount"},
								{"dataType":"uint","name":"takerAssetAmount"},
								{"dataType":"uint","name":"makerFee"},
								{"dataType":"uint","name":"takerFee"},
								{"dataType":"uint","name":"expirationTimeSeconds"},
								{"dataType":"uint","name":"salt"},
								{"dataType":"bytes32","name":"makerAssetData0"},
								{"dataType":"bytes32","name":"makerAssetData1"},
								{"dataType":"bytes32","name":"takerAssetData0"},
								{"dataType":"bytes32","name":"takerAssetData1"},
								{"dataType":"bytes32","name":"signature0"},
								{"dataType":"bytes32","name":"signature1"},
								{"dataType":"bytes32","name":"signature2"},
								{"dataType":"address","name":"exchangeAddress"}
							],
							"takerArguments":[
								{"dataType":"address","name":"taker"},
								{"dataType":"uint","name":"takerAssetAmount"}
							],
							"makerValues":{
								"exchangeAddress":"0x4f833a24e1f95d70f028921e27040ca56e09ab0b",
								"senderAddress":"0x0000000000000000000000000000000000000000",
								"makerAddress":"0x8734d61afaf109b7e52bd44acf0f5eb9cfb06b75",
								"takerAddress":"0x0000000000000000000000000000000000000000",
								"makerAssetData":"0xf47261b00000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2",
								"takerAssetData":"0xf47261b000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359",
								"feeRecipientAddress":"0xa258b39954cef5cb142fd567a46cddb31a670124",
								"makerAssetAmount":"15000000000000000000",
								"takerAssetAmount":"6357025538520683977620",
								"makerFee":"0",
								"takerFee":"0",
								"expirationTimeSeconds":"1549395903",
								"signature":"0x1bb05bc6f77453bdfbb2e1c39e88926ea473060d3b21608708cab05116864d3eb92f0e1d2ee572c2e7a452a4e3f82dfdc69e6949fa46a35569fbcce414d422c8d803",
								"salt":"1549395303502",
								"makerAssetData0":"0xf47261b00000000000000000000000009f8f72aa9304c8b593d555f12ef6589c",
								"makerAssetData1":"0xc3a579a2",
								"takerAssetData0":"0xf47261b000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a",
								"takerAssetData1":"0x23260359",
								"signature0":"0x1bb05bc6f77453bdfbb2e1c39e88926ea473060d3b21608708cab05116864d3e",
								"signature1":"0xb92f0e1d2ee572c2e7a452a4e3f82dfdc69e6949fa46a35569fbcce414d422c8",
								"signature2":"0xd803"
							},
							"posterSignature":{
								"v":27,
								"r":"0x2d2fe7b26745921e015453c43eafd11e057dcf632b036537721a4a0b1a13800a",
								"s":"0x418f5379937780a12c5c6407f962dde81efb688b26977709a2d102487b6e8ed3"
							}
						},
						"required": ["subContract", "maker", "makerValues", "posterSignature"],
						"properties": {
							"subContract": {
								"description": "The Ethereum address of the Paradigm SubContract the order is for.",
								"default": "0x0afd97c4548d6a5db854d6b1b4b18138327f944c",
								"type": "string",
								"minLength": 42
							},
							"maker": {
								"description": "The Ethereum address of the order's maker and signing party.",
								"default": "0xdbffce76e8ab7b64b8d4400778bf514b92facb66",
								"type": "string",
								"minLength": 42
							},
							"makerArguments": {
								"description": "An array of objects that define the order's required maker arguments",
								"default": [{
									"dataType": "address",
									"name": "orderMaker"
								}, {
									"dataType": "address",
									"name": "orderTaker"
								}, {
									"dataType": "address",
									"name": "orderMakerTokenAddress"
								}, {
									"dataType": "address",
									"name": "orderTakerTokenAddress"
								}, {
									"dataType": "address",
									"name": "orderFeeRecipient"
								}],
								"type": "array"
							},
							"takerArguments": {
								"description": "An array of objects that define the order's required taker arguments",
								"default": [{
									"dataType": "address",
									"name": "orderMaker"
								}, {
									"dataType": "address",
									"name": "orderTaker"
								}, {
									"dataType": "address",
									"name": "orderMakerTokenAddress"
								}, {
									"dataType": "address",
									"name": "orderTakerTokenAddress"
								}, {
									"dataType": "address",
									"name": "orderFeeRecipient"
								}],
								"type": "array"
							},
							"makerValues": {
								"description": "An object that defines the order's maker values, as defined in the `makerArguments`.",
								"type": "object",
								"properties": {},
								"default": {}
							},
							"makerSignature": {
								"description": "An optional field that defines the order's maker signature, independent from the `makerValues`.",
								"type": "object",
								"properties": {},
								"default": {}
							},
							"posterSignature": {
								"description": "An object that contains the signature of the poster submitting the order. May also be signed by the maker.",
								"type": "object",
								"properties": {},
								"default": {
									"v":28,
									"r":"0x6a8767350ba00b0beb9818d9e8abb89b3abb88ac074048c2af3898cc60a74e83",
									"s":"0x043dbbe570f524d6222311bfdf447421aa67ebec3589753f22e830d159fbf95b",
									"messageHex":"0xc6dd06b493ce1387032dd47d39e1f1544878396b97ae89f0b34475e2a711eac9"
								}
							}
						}	
					},
					"mode": {
						"description": "The broadcast mode to be used for the underlying Tendermint remote procedural call.",
                        "default": "sync",
                        "enum": ["sync", "async", "commit"],
						"type": "string",
						"minLength": 1
					}
				},
				"required": ["order"]
			},
			"result": {
				"type": "object",
				"properties": {
					"message": {
						"description": "The response from the node to the order submission. Will include ID in some cases.",
						"default": "new order rejected: invalid poster or no poster stake",
						"type": "string"
					},
					"processed": {
						"description": "The date and time at which the request was processed by the node.",
						"default": "4/1/2019, 10:22:48 AM",
						"type": "string"
					},
					"code": {
						"description": "The raw response code returned by the ParadigmCore ABCI application. Only `0` indicates success.",
						"default": 1,
						"type": "number"
					}
				},
				"required": ["message", "processed", "code"]
			},
			"errors": [
				{
					"description": "The provided parameters are invalid.",
					"code": -32602,
					"message": "Invalid Parameters",
					"data": {}
				},
				{
					"description": "The request object is invalid.",
					"code": -32600,
					"message": "Parse Error",
					"data": {}
				},
				{
					"description": "The server encountered an error processing the request.",
					"code": -32603,
					"message": "Internal Error",
					"data": {}
				}
			]
        },
		"state.latestHeight": {
			"summary": "Return the height of the best known block.",
			"description": "The `block.latestHeight` method will return the integer height of the latest block committed to the blockchain.",
			"tags": [
				"state",
				"blockchain"
            ],
			"result": {
				"type": "object",
				"properties": {
					"height": {
						"description": "The integer height of the latest committed block.",
						"default": 42341,
						"type": "number"
					}
				},
				"required": ["height"]
			},
			"errors": [
				{
					"description": "The provided parameters are invalid.",
					"code": -32602,
					"message": "Invalid Parameters",
					"data": {}
				},
				{
					"description": "The request object is invalid.",
					"code": -32600,
					"message": "Parse Error",
					"data": {}
				},
				{
					"description": "The server encountered an error processing the request.",
					"code": -32603,
					"message": "Internal Error",
					"data": {}
				}
			]
		},
		"state.orderCounter": {
			"summary": "Query the `state.orderCounter` field.",
			"description": "Return the incremental counter that tracks the in-state number of total `order` transactions.",
			"tags": [
                "state"
            ],
			"result": {
				"type": "object",
				"properties": {
					"response": {
						"description": "The result of the query, as a number. Counts the number of total orders processed by the network since genesis.",
						"default": 113415,
						"type": "number"
					}
				},
				"required": ["response"]
			},
			"errors": [
				{
					"description": "The provided parameters are invalid.",
					"code": -32602,
					"message": "Invalid Parameters",
					"data": {}
				},
				{
					"description": "The request object is invalid.",
					"code": -32600,
					"message": "Parse Error",
					"data": {}
				},
				{
					"description": "The server encountered an error processing the request.",
					"code": -32603,
					"message": "Internal Error",
					"data": {}
				}
			]
		},
		"state.query": {
			"summary": "Query the permitted fields of an OrderStream node's state.",
			"description": [
				"The `state.query` method allows RPCs to return information about the node (and a connected network's) public state.",
				"The `params.path` field can be used to direct a query to a particular path of the current state. The `path` is passed to ParadigmCore's ABCI `query` method, and the result of that function is returned."
			],
			"tags": [
				"state",
				"query"
            ],
			"params": {
				"type": "object",
				"properties": {
					"path": {
						"description": "The `path` string is passed to the `abci_query` method and directs a query towards a particular state account object.",
						"default": "posters/0xaa554d0c5ff879387fc234de5d22ec02983baa27/limit",
						"type": "string"
					}
				},
				"required": ["path"]
			},
			"result": {
				"type": "object",
				"properties": {
					"response": {
						"description": "The result of the query, as a string (more documentation coming soon).",
						"default": "12000",
						"type": "number"
					}
				},
				"required": ["response"]
			},
			"errors": [
				{
					"description": "The provided parameters are invalid.",
					"code": -32602,
					"message": "Invalid Parameters",
					"data": {}
				},
				{
					"description": "The request object is invalid.",
					"code": -32600,
					"message": "Parse Error",
					"data": {}
				},
				{
					"description": "The server encountered an error processing the request.",
					"code": -32603,
					"message": "Internal Error",
					"data": {}
				}
			]
		},
		"session.end": {
			"summary": "End a StreamAPI session.",
			"description": [
				"Terminate a StreamAPI session immediately.\n ",
				"Calling this method will cancel all subscriptions, and immediately close the client/server connection."
			],
			"tags": [
                "session"
			],
			"errors": [
				{
					"description": "The provided parameters are invalid.",
					"code": -32602,
					"message": "Invalid Parameters",
					"data": {}
				},
				{
					"description": "The request object is invalid.",
					"code": -32600,
					"message": "Parse Error",
					"data": {}
				},
				{
					"description": "The server encountered an error processing the request.",
					"code": -32603,
					"message": "Internal Error",
					"data": {}
				}
			]
        }
	}
}